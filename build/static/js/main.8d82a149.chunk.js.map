{"version":3,"sources":["reportWebVitals.js","images/Logo.svg","images/Logo-mobile.svg","images/Loading.svg","components/Loading.js","components/Search/CardDetails/CardDetailsAbout.js","images/Residents.svg","components/Search/CardDetails/CardDetailsPlace.js","components/Search/CardDetails/CardDetails.js","components/Search/SearchResult.js","components/Search/SearchBar.js","components/Search/SearchPage.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Loading","className","alt","src","loading","CardDetailsPlace","character","useState","status","setStatus","useEffect","gender","name","species","episode","length","air_date","props","place","text","type","dimension","residents","CardDetails","selected","location","origin","id","image","CardDetailsAbout","SearchResult","characters","results","open","setOpen","map","element","onClick","SearchBar","keyword","setKeyword","GET_CHARACTERS","gql","useLazyQuery","getCharacters","data","error","handleClick","pageNumber","variables","page","filter","document","querySelector","classList","add","remove","value","placeholder","onChange","e","target","result","count","info","numberOfPages","Math","ceil","i","push","pages","SearchPage","media","srcSet","logoMobile","logo","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8d82a149.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export default __webpack_public_path__ + \"static/media/Logo.d8bb791a.svg\";","export default __webpack_public_path__ + \"static/media/Logo-mobile.edcbcb60.svg\";","export default __webpack_public_path__ + \"static/media/Loading.d6d4d401.svg\";","import \"../styles/search.css\";\r\nimport loading from \"../images/Loading.svg\";\r\nimport React from \"react\";\r\n\r\n/*\r\nThis component is render everytime a query is executed\r\nIt shows an image and a loading text in the middle of page and blur the background\r\n*/\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"search__loading\">\r\n      <img alt=\"Loading\" className=\"search__loading--image\" src={loading} />\r\n      <p className=\"search__loading--text\">Loading</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\n// This component renders the \"About\" section inside card details\r\nconst CardDetailsPlace = (character) => {\r\n  const [status, setStatus] = useState(\r\n    \"It can't be told if it is alive or dead.\"\r\n  );\r\n\r\n  // It makes all possible variations of texts\r\n  useEffect(() => {\r\n    if (character?.status === \"Alive\") {\r\n      if (character?.gender === \"Male\") {\r\n        setStatus(\"He is alive and well.\");\r\n      } else if (character?.gender === \"Female\") {\r\n        setStatus(\"She is alive and well.\");\r\n      } else {\r\n        setStatus(\"It is alive and well.\");\r\n      }\r\n    } else if (character?.status === \"Dead\") {\r\n      if (character?.gender === \"Male\") {\r\n        setStatus(\"He is dead.\");\r\n      } else if (character?.gender === \"Female\") {\r\n        setStatus(\"She is dead.\");\r\n      } else {\r\n        setStatus(\"It is dead.\");\r\n      }\r\n    } else {\r\n      if (character?.gender === \"Male\") {\r\n        setStatus(\"It can't be told if he is alive or dead.\");\r\n      } else if (character?.gender === \"Female\") {\r\n        setStatus(\"It can't be told if she is alive or dead.\");\r\n      }\r\n    }\r\n  }, [character?.gender, character?.status]);\r\n\r\n  return (\r\n    <div className=\"card__details__text--about\">\r\n      <h1 className=\"card__details__text--tittle\">A B O U T</h1>\r\n      <p>\r\n        {character?.name} is a {character?.gender} {character?.species}.{\" \"}\r\n        {status} Last seen in{\" \"}\r\n        {character?.episode?.[character?.episode?.length - 1]?.air_date}.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardDetailsPlace;\r\n","export default __webpack_public_path__ + \"static/media/Residents.24993016.svg\";","import React from \"react\";\r\nimport residents from \"../../../images/Residents.svg\";\r\n\r\n// This component renders the \"Origin and Location\" section inside card details\r\nconst CardDetailsPlace = (props) => {\r\n  const { place, text } = props;\r\n\r\n  return (\r\n    <div className=\"card__details__text--origin\">\r\n      <h1 className=\"card__details__text--tittle\">{text}</h1>\r\n      <p>{place?.type || \"Unknown Planet\"}</p>\r\n      <h2>{place?.name || \"Unknown\"}</h2>\r\n      <span>{place?.dimension || \"Unknown dimension\"}</span>\r\n      {place?.residents?.[0]?.name && (\r\n        <div className=\"card__details__text--residents\">\r\n          <img alt=\"Residentes icon\" src={residents} />\r\n          <p>{place?.residents?.length + \" residents\"}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardDetailsPlace;\r\n","import CardDetailsAbout from \"./CardDetailsAbout\";\r\nimport CardDetailsPlace from \"./CardDetailsPlace\";\r\nimport React from \"react\";\r\n\r\n// This component renders the character card details info\r\nconst CardDetails = (props) => {\r\n  const { character, selected } = props;\r\n\r\n  const location = character?.location;\r\n  const origin = character?.origin;\r\n\r\n  if (selected === character.id) {\r\n    return (\r\n      <>\r\n        <div className=\"card__details__image\">\r\n          <img\r\n            alt=\"Card Detail Blur\"\r\n            className=\"card__details__image--blur\"\r\n            src={character?.image}\r\n          />\r\n          <div className=\"card__details__image--regular\">\r\n            <img alt=\"Card Detail\" src={character?.image} />\r\n            <div className=\"card__details__image--text\">\r\n              <span>{character?.name}</span>\r\n              <p>{character?.species}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"card__details__text\">\r\n          <CardDetailsAbout character={character} />\r\n          <CardDetailsPlace place={location} text={\"L O C A T I O N\"} />\r\n          <CardDetailsPlace place={origin} text={\"O R I G I N\"} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default CardDetails;\r\n","import \"../../styles/search.css\";\r\nimport React, { useState } from \"react\";\r\nimport CardDetails from \"./CardDetails/CardDetails\";\r\n\r\n// This component renders the searched character cards and open the card details\r\nconst SearchResult = (props) => {\r\n  const characters = props?.characters?.results;\r\n\r\n  // It's not Boolean because it compares the searched character id with the clicked one on child component\r\n  const [open, setOpen] = useState(\"\");\r\n\r\n  return characters?.map((element) => {\r\n    return (\r\n      <div key={element.id}>\r\n        <div className=\"card\" onClick={() => setOpen(element.id)}>\r\n          <img\r\n            alt=\"Character card\"\r\n            className={`card__image ${\r\n              element.status === \"Dead\" ? \"card__image--dead\" : \"\"\r\n            }`}\r\n            src={element.image}\r\n          />\r\n          <div className=\"card__text\">\r\n            <span>{element.name}</span>\r\n            <p>{element.species}</p>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={`card__details ${\r\n            open === element.id ? \"open\" : \"close\"\r\n          }`}\r\n        >\r\n          <div className=\"card__details__button\">\r\n            <button onClick={() => setOpen(\"\")} type=\"button\">\r\n              Close\r\n            </button>\r\n          </div>\r\n          <CardDetails selected={open} character={element} />\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nexport default SearchResult;\r\n","import { gql, useLazyQuery } from \"@apollo/client\";\r\nimport Loading from \"../Loading\";\r\nimport React, { useState } from \"react\";\r\nimport SearchResult from \"./SearchResult\";\r\n\r\n// This components renders the search bar, button and pagination\r\nconst SearchBar = () => {\r\n  const [keyword, setKeyword] = useState(\"\");\r\n\r\n  // Query to get all characters's data\r\n  const GET_CHARACTERS = gql`\r\n    query getCharacters($page: Int, $filter: FilterCharacter) {\r\n      characters(page: $page, filter: $filter) {\r\n        info {\r\n          count\r\n        }\r\n        results {\r\n          id\r\n          name\r\n          status\r\n          species\r\n          type\r\n          gender\r\n          origin {\r\n            name\r\n            type\r\n            dimension\r\n            residents {\r\n              name\r\n            }\r\n          }\r\n          location {\r\n            name\r\n            type\r\n            dimension\r\n            residents {\r\n              name\r\n            }\r\n          }\r\n          image\r\n          episode {\r\n            air_date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  const [getCharacters, { data, error, loading }] = useLazyQuery(\r\n    GET_CHARACTERS\r\n  );\r\n\r\n  // Execute query when search or pagination buttons are clicked\r\n  const handleClick = (pageNumber) => {\r\n    getCharacters({\r\n      variables: { page: pageNumber, filter: { name: keyword } },\r\n    });\r\n  };\r\n\r\n  // Render pagination buttons\r\n  const pages = () => {\r\n    const result = [];\r\n    const count =  data.characters?.info?.count\r\n    // The query always returns 20 results max, so it divides by 20 to know the number of pages\r\n    const numberOfPages = count > 20 ? Math.ceil(count / 20) : 1\r\n\r\n    for (let i = 1; i <= numberOfPages; i++) {\r\n      result.push(\r\n        <p\r\n          className={`pages__counter--${i}`}\r\n          onClick={() => handleClick(i)}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </p>\r\n      );\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  // It fixes background height issues when query is loading or complete\r\n  if (data) document.querySelector(\".background\").classList.add(\"new__height\");\r\n  if (error || loading)\r\n    document.querySelector(\".background\").classList.remove(\"new__height\");\r\n  if (loading) return <Loading />;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"search\">\r\n        <div className=\"search__field\">\r\n          <input\r\n            value={keyword}\r\n            placeholder={\"Search characters\"}\r\n            onChange={(e) => setKeyword(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"search__button\">\r\n          <button onClick={() => handleClick(1)} type=\"button\">\r\n            Search\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {data && (\r\n        <>\r\n          <div className=\"search__result\">\r\n            <SearchResult characters={data.characters} />\r\n          </div>\r\n          <div className=\"pages__counter\">{pages()}</div>\r\n        </>\r\n      )}\r\n      {error && <span className=\"search__error\">No character found!</span>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import \"../../styles/search.css\";\r\nimport logo from \"../../images/Logo.svg\";\r\nimport logoMobile from \"../../images/Logo-mobile.svg\";\r\nimport React from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\n\r\n// This components renders the main page\r\nconst SearchPage = () => {\r\n  return (\r\n    <div className=\"background\">\r\n      <picture>\r\n        <source media=\"(max-width: 767px)\" srcSet={logoMobile} />\r\n        <img alt=\"Rick and Morty logo\" className=\"logo\" src={logo} />\r\n      </picture>\r\n      <SearchBar />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPage;\r\n","import \"./styles/index.css\";\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport reportWebVitals from './reportWebVitals';\r\nimport SearchPage from \"./components/Search/SearchPage\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"https://rickandmortyapi.com/graphql\",\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <React.StrictMode>\r\n      <SearchPage />\r\n    </React.StrictMode>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}